buildscript {
    ext {
        springBootVersion = '2.0.6.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'org.ai'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

springBoot {
    mainClassName = 'org.ai.carp.CarpServerApplication'
}

repositories {
    mavenCentral()
}

task carpSetup(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.ai.carp.CARPSetup"
}

task impSetup(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.ai.carp.IMPSetup"
}

task migrateData(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.ai.carp.MigrateData"
}

task carpFinal(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.ai.carp.CARPJudgeFinal"
}

task carpFinalFix(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.ai.carp.CARPJudgeFinalFix"
}

task timestampFix(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.ai.carp.TimestampFix"
}

task impDatasetFix(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.ai.carp.IMPDatasetFix"
}

task liteCaseFix(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.ai.carp.LiteCaseFix"
}

task impResetAll(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.ai.carp.IMPResestAll"
}

task iseFixBias(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.ai.carp.ISEFixBias"
}

task iseFinal(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.ai.carp.ISEJudgeFinal"
}

task impFinal(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.ai.carp.IMPJudgeFinal"
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-data-mongodb')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-websocket')
    implementation('org.springframework.session:spring-session-data-mongodb')
    // https://mvnrepository.com/artifact/org.apache.poi/poi
    compile group: 'org.apache.poi', name: 'poi', version: '4.0.0'
    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '4.0.0'
    // https://mvnrepository.com/artifact/es.moki.ratelimitj/ratelimitj-core
    compile group: 'es.moki.ratelimitj', name: 'ratelimitj-core', version: '0.5.0'
    // https://mvnrepository.com/artifact/es.moki.ratelimitj/ratelimitj-inmemory
    compile group: 'es.moki.ratelimitj', name: 'ratelimitj-inmemory', version: '0.5.0'
    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
}
